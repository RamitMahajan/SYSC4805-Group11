function sysCall_init()
    corout=coroutine.create(coroutineMain)
end

function sysCall_actuation()
    if coroutine.status(corout)~='dead' then
        local ok,errorMsg=coroutine.resume(corout)
        if errorMsg then
            error(debug.traceback(corout,errorMsg),2)
        end
    end
end

setLeds=function(elHandle,left,middle,right)
    simUI.setCheckboxValue(ui,1,not left and 0 or 2)
    simUI.setCheckboxValue(ui,2,not middle and 0 or 2)
    simUI.setCheckboxValue(ui,3,not right and 0 or 2)
end

function coroutineMain()
    local xml =[[<ui title="Line tracer, sensor display" closeable="false" placement="relative" position="50,-50" layout="grid">
            <label text=""/>
            <checkbox id="1" enabled="false" text="" style="* {font-size: 20px; font-weight: bold; margin-left: 20px; margin-right: 20px;}"/>
            <checkbox id="2" enabled="false" text="" style="* {font-size: 20px; font-weight: bold; margin-left: 20px; margin-right: 20px;}"/>
            <checkbox id="3" enabled="false" text="" style="* {font-size: 20px; font-weight: bold; margin-left: 20px; margin-right: 20px;}"/>
    </ui>]]
    ui=simUI.create(xml)
    
    objHandle=sim.getObjectHandle(sim.handle_self)
    result,robotName=sim.getObjectName(objHandle)
    lineTracerBase=sim.getObjectHandle("LineTracerBase")
    proxSens={}
    for i=1,8,1 do
        proxSens[i]=sim.getObjectHandle('proxSensor'..i)
    end
    maxVel=120*math.pi/180
    leftJoint=sim.getObjectHandle("LeftJoint")
    rightJoint=sim.getObjectHandle("RightJoint")
    leftJointDynamic=sim.getObjectHandle("DynamicLeftJoint")
    rightJointDynamic=sim.getObjectHandle("DynamicRightJoint")
    nominalLinearVelocity=0.3
    wheelRadius=0.027
    interWheelDistance=0.119
    initialVehicleZpos=sim.getObjectPosition(objHandle,sim.handle_parent)[3]
    previousSimulationTime=sim.getSimulationTime()

    -- We want next while-loop to be executed exactly once every main script pass, but since
    -- this script runs in a thread, we explicitely switch threads at the end of the while-loop
    -- Next instruction makes sure one full pass of the while-loop can be executed before switching threads:
    sim.setThreadSwitchTiming(99)

    while true do
        simulationTime=sim.getSimulationTime()
        dt=simulationTime-previousSimulationTime
        previousSimulationTime=simulationTime
        state=sim.getSimulationState()
        s=sim.getObjectSizeFactor(objHandle) -- in case we wanna scale the vehicle during simulation
        noDetectionDistance=0.05*s
        proxSensDist={noDetectionDistance,noDetectionDistance,noDetectionDistance,noDetectionDistance,noDetectionDistance,noDetectionDistance,noDetectionDistance,noDetectionDistance}
        for i=1,8,1 do
            res,dist=sim.readProximitySensor(proxSens[i])
            if (res>0) and (dist<noDetectionDistance) then
                proxSensDist[i]=dist
            end
        end
        
        
        -- Read the sensors:
        velRight=maxVel
        velLeft=maxVel
        if (proxSensDist[2]+proxSensDist[3]+proxSensDist[4]+proxSensDist[5]==noDetectionDistance*4) then
        -- Nothing in front. Maybe we have an obstacle on the side, in which case we wanna keep a constant distance with it:
        if (proxSensDist[1]>0.25*noDetectionDistance) then
            velLeft=velLeft+maxVel*(1-(proxSensDist[1]/noDetectionDistance))
            velRight=velRight+maxVel*(1-(proxSensDist[1]/noDetectionDistance))
        end
        if (proxSensDist[6]>0.25*noDetectionDistance) then
            velLeft=velLeft+maxVel*(1-(proxSensDist[6]/noDetectionDistance))
            velRight=velRight+maxVel*(1-(proxSensDist[6]/noDetectionDistance))
        end
        else
        -- Obstacle in front. Use Braitenberg to avoid it
            for i=1,4,1 do
            velLeft=velLeft+maxVel*(1-(proxSensDist[1+i]/noDetectionDistance))
            velRight=velRight+maxVel*(1-(proxSensDist[1+i]/noDetectionDistance))
            end
        end

        -- Set the sensor indicators:

        -- Decide about left and right velocities:
        linearVelocityLeft=nominalLinearVelocity*s
        linearVelocityRight=nominalLinearVelocity*s
        

        -- Now make it move!
        sim.setJointTargetVelocity(leftJointDynamic,velLeft)
        sim.setJointTargetVelocity(rightJointDynamic,velRight)

        sim.switchThread() -- explicit thread switching
    end
end
